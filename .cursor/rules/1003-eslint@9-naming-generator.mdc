---
title: "ESLint Naming Generator for v9+"
description: "GENERATE ESLint flat configuration from KB files when IMPLEMENTING naming standards to ENSURE validation with ESLint v9+"
# Globs définissent le contexte où cette logique *pourrait* s'appliquer,
# même si la règle elle-même n'est qu'une définition.
globs: ["src/**/*.{js,jsx,ts,tsx}"]
alwaysApply: false # Cette règle définit la logique, elle ne s'applique pas activement seule.
tags: ["naming", "eslint", "generator", "javascript", "typescript", "flat-config", "v9"]
---

```structured
// --- Knowledge Base References ---
$KB:paths = {
  principles: ".cursor/kb/naming-principles.yaml",
  global_rules: ".cursor/kb/global-rules.yaml",
  conventions: ".cursor/kb/element-conventions.yaml",
  examples: ".cursor/kb/naming-examples.yaml",
  eslint_v9: ".cursor/kb/eslint-v9-config.yaml"
}

// --- Commande de Génération de Configuration ESLint ---
/generate_eslint_config[output_path="eslint.config.js"]
    // --- Phase 1: Préparation des ressources ---
    |init_resources() -> $resources
        // Charger et parser les fichiers KB
        |$kb_data = {}
        |for (path_key, path_value in $KB:paths)
            |read_file(path_value) -> $content
            |parse_yaml($content) -> $kb_data[path_key]
        
        // Vérifier et préparer les prérequis
        |$tsconfig_path = setup_tsconfig($kb_data.eslint_v9.prerequisites.tsconfig)
        |$package_updated = setup_package_json($kb_data.eslint_v9.prerequisites.package_json)
        
        |$resources = {
            kb_data: $kb_data,
            tsconfig_path: $tsconfig_path,
            package_updated: $package_updated
        }
    
    // --- Phase 2: Génération des fichiers ---
    |generate_files($resources, $output_path) -> $result
        // Générer la configuration ESLint
        |generate_eslint_config($resources, $output_path) -> $eslint_config_result
        
        // Générer la documentation
        |generate_documentation($resources) -> $readme_result
        
        |$result = {
            eslint_config: $eslint_config_result,
            readme: $readme_result
        }
    
    // --- Fonctions auxiliaires ---
    |setup_tsconfig($tsconfig_template) -> $tsconfig_path
        |file_exists("tsconfig.json") -> $exists
        |if (!$exists)
            |$content = stringify_json($tsconfig_template)
            |write_file("tsconfig.json", $content)
        |return "./tsconfig.json"
    
    |setup_package_json($package_template) -> $updated
        |file_exists("package.json") -> $exists
        |if ($exists)
            |read_file("package.json") -> $content
            |parse_json($content) -> $data
            |if (!$data.type || $data.type !== "module")
                |$data.type = "module"
                |$content = stringify_json($data)
                |write_file("package.json", $content)
                |$updated = true
            |else
                |$updated = false
        |else
            |$updated = false
        |return $updated
    
    |generate_eslint_config($resources, $output_path) -> $result
        |$kb_data = $resources.kb_data
        |submit_to_llm({
            task: "Générer une configuration ESLint au format flat (v9+)",
            kb_data: $kb_data,
            config_templates: $kb_data.eslint_v9.configuration_template,
            naming_mappings: $kb_data.eslint_v9.naming_convention_mapping,
            incompatible_plugins: $kb_data.eslint_v9.incompatible_plugins,
            instructions: [
                "Utiliser les templates fournis dans le KB ESLint v9",
                "Appliquer les conventions de nommage définies dans les KB",
                "Éviter les plugins incompatibles avec ESLint v9",
                "S'assurer que toutes les règles sont compatibles avec le format flat config"
            ],
            output_format: "JavaScript module (ESM)"
        }) -> $config
        
        |write_file($output_path, $config)
        |$result = { path: $output_path, success: true }
        |return $result
    
    |generate_documentation($resources) -> $result
        |$kb_data = $resources.kb_data
        |submit_to_llm({
            task: "Générer une documentation pour la configuration ESLint",
            kb_data: $kb_data,
            doc_sections: $kb_data.eslint_v9.documentation_sections,
            troubleshooting: $kb_data.eslint_v9.troubleshooting,
            output_format: "Markdown"
        }) -> $readme
        
        |write_file("eslint-config-readme.md", $readme)
        |$result = { path: "eslint-config-readme.md", success: true }
        |return $result
    
    // --- Exécution principale ---
    |main()
        |init_resources() -> $resources
        |generate_files($resources, $output_path) -> $result
        
        success:
            |set_output(
                status: "success", 
                message: "Configuration ESLint v9 générée avec succès", 
                config_path: $result.eslint_config.path, 
                readme_path: $result.readme.path, 
                prerequisites: {
                    tsconfig_path: $resources.tsconfig_path,
                    package_updated: $resources.package_updated
                }
            )
        error:
            |set_output(status: "error", message: "Erreur lors de la génération", error: $error)