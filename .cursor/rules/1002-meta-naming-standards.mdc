---
title: "Naming Standards"
description: "ENFORCE when WRITING code to ENSURE consistency, readability, and maintainability"
globs: "**/*"
alwaysApply: true
tags: ["naming", "conventions", "code-quality", "readability", "standards"]
---

# Naming Standards Cognitive Workflow

↹ Ω•naming•processor [p=1] {
  ⊕ kb•sources {
    principles: kb://naming-principles.yaml
    conventions: kb://element-conventions.yaml
    rules: kb://global-rules.yaml
    examples: kb://naming-examples.yaml
  }
}
Σ knowledge•foundation

↹ cognitive•process [p=1] -> [
  ⊕ analyze {
    identify•context•purpose
    determine•element•type => kb://element-conventions.yaml
    assess•functional•role
    evaluate•scope•and•visibility
  }
  
  ⊕ synthesize {
    retrieve•pattern => kb://element-conventions.yaml::element::type
    apply•pattern•to•intent
    transform•purpose•to•name
    check•namespace•uniqueness
  }
  
  ⊕ validate {
    verify•against•principles => kb://naming-principles.yaml
    check•global•constraints => kb://global-rules.yaml::max_length
    compare•with•examples => kb://naming-examples.yaml
    assess•multi•dimensions => {clarity•brevity•consistency•coherence}
  }
  
  ⊕ adapt {
    detect•project•patterns
    align•with•domain•vocabulary
    maintain•codebase•consistency
    balance•standards•with•context
  }
]
Σ naming•decision•framework

↹ implementation•strategy [p=2] {
  ⊕ adoption {
    new•code: apply•cognitive•process
    legacy•code: refactor•opportunistically
    automated•validation: integrate•with•linters
  }
  
  ⊕ evolution {
    integrate•feedback => learn•from•corrections
    track•semantic•drift => identify•evolution•triggers
    refine•process => enhance•over•time
  }
}
Σ practical•application

Ω.naming•verify = (
  analyze => determine•element•type
  → synthesize => apply•appropriate•pattern
  → validate => check•against•all•kb•sources
  → suggest => provide•improvements
)

Σ final = naming•cognitive•workflow ⊕ kb•integration 